data <- read.csv('soapkoptimisation.csv', as.is=T)
View(data)
geom_point()
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=d)) +
geom_point()
install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=d)) +
geom_point()
install.packages("scales")
install.packages("codetools")
install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=d)) +
geom_point()
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point()
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_discrete(main='100k reads')
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_manual(main='100k reads')
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_color_brewer(main='100k reads')
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_color_brewer(palette='Set1', title='100k reads')
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_color_brewer(palette='Set1', name='100k reads')
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Dimension-reduced multi parameter optimisation of k in soapdenovo assemblies with varying read depth')
time <- aggregate(data, d | time)
time <- aggregate(data, d | time, sum)
time <- aggregate(data, d ~ time, sum)
time <- aggregate(d ~ time, data, sum)
View(time)
time <- aggregate(time | d, data, sum)
time <- aggregate(time ~ d, data[,c('d', 'time')], sum)
View(time)
ggplot(time, aes(x=d, y=time)) +
geom_(point) +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
geom_point()) +
ggplot(time, aes(x=d, y=time)) +
geom_point() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
geom_label() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
geom_text() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
geom_text(label=d) +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise k for SoapDenovo (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
ylab('number of reads (x100k)') +
ggtitle('Time to optimise k for soapdenovo (seconds)')
ggplot(time, aes(x=d, y=time)) +
geom_point() +
xlab('number of reads (x100k)') +
ylab('time to optimise k for soapdenovo (seconds)')
ggplot(time, aes(x=d, y=time/60)) +
)
ggplot(time, aes(x=d, y=time/60)) +
geom_point() +
xlab('number of reads (x100k)') +
ylab('time to optimise k for soapdenovo (seconds)')
ggplot(time, aes(x=d, y=time/60)) +
geom_point() +
xlab('number of reads (x100k)') +
ylab('time to optimise k for soapdenovo (minutes)')
ggplot(time, aes(x=d, y=time/60)) +
geom_point() +
xlab('number of reads (x100k)') +
ylab('time to optimise k for soapdenovo (minutes)') +
ggtitle('Time taken to sweep + run objective functions for k in soapdenovo with increasing read depth')
library(ggplot2)
ggplot(data, aes(x=k, y=dr, colour=factor(d))) +
geom_point() +
ylab('distance from optimal') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Dimension-reduced multi objective optimisation of k in soapdenovo assemblies with varying read depth')
View(data)
# plot distribution of each objective function
ggplot(data, aes(x=k, y=rba, colour=factor(d))) +
geom_point() +
ylab('number of conditional annotations') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Distribution of RBA objective function vs. k in soapdenovo assemblies with varying read depth')
ggplot(data, aes(x=k, y=log(rba), colour=factor(d))) +
geom_point() +
ylab('log number of conditional annotations') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Distribution of log RBA objective function vs. k in soapdenovo assemblies with varying read depth')
# UT
ggplot(data, aes(x=k, y=ut, colour=factor(d))) +
geom_point() +
ylab('number of unexpressed transcripts') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Distribution of UT objective function vs. k in soapdenovo assemblies with varying read depth')
ggplot(data, aes(x=k, y=log(ut), colour=factor(d))) +
geom_point() +
ylab('log number of unexpressed transcripts') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Distribution of log UT objective function vs. k in soapdenovo assemblies with varying read depth')
ggplot(data, aes(x=k, y=log(ut), colour=factor(d))) +
geom_point() +
ylab('log number of unexpressed transcripts') +
scale_color_brewer(palette='Set1', name='100k reads') +
ggtitle('Distribution of log UT objective function vs. k in soapdenovo assemblies with varying read depth')
install.packages("lattice")
library(lattice)
wireframe(Height ~ x*y, data = elevation.fit,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
# surface plot with colour by DFO
wireframe(dfo ~ ut*rba, data = data,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
wireframe(dfo ~ ut*rba, data,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
library(lattice)
wireframe(dfo ~ ut*rba, data,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
data <- read.csv('soapkoptimisation.csv', as.is=T)
wireframe(dfo ~ ut*rba, data,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
View(data)
# surface plot with colour by DFO
wireframe(dr ~ ut*rba, data,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
wireframe(dr ~ (ut/5000)*(rba/50000), data,
xlab = "unexpressed transcripts", ylab = "",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
wireframe(dr ~ (ut/5000)*(rba/50000), data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
data$uts <- data$ut / max(data$ut)
View(data)
data$rbas <- data$rba / max(data$rba)
wireframe(dr ~ uts*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
# surface plot with colour by DFO
cloud(dr ~ uts*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
cloud(dr ~ uts*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(k ~ uts*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(k ~ uts*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
# surface plot with colour by DFO
cloud(k ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
drape = TRUE,
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(k ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brm ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(d ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
plot((1-data$uts), data$rbas)
cloud(d ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
screen = list(z = 60, x = -60)
)
cloud(d ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
screen = list(z = 60, x = -60)
)
cloud(d ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
library(lattice)
# surface plot with colour by DFO
plot((1-data$uts), data$rbas)
cloud(d ~ (1-uts)*rbas, data,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = d,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
plot(rnorm(13000, 50, 20)/100.0)))
plot(rnorm(13000, 50, 20)/100.0))
plot(rnorm(13000, 50, 20)/100.0)
plot(rnorm(130, 50, 20)/100.0)
brms = rnorm(1300, 50, 20)/100.0)
brms = (rnorm(1300, 50, 20)/100.0))
uts = rnorm(1300, 50, 20)/100.0
rbas = (rnorm(1300, 70, 5)/100.0)
brms = (rnorm(1300, 50, 20)/100.0)
fakedata <- data.frame(uts = uts,
rbas = rbas,
brms = brms)
dr <- function(opt, res, max) {
return((opt - res) / max) ** 2)
}
dr <- function(opt, res, max) {
return(((opt - res) / max) ** 2)
}
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
wireframe(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
wireframe(data.matrix(fakedata),
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
fakedata$dfo <- apply(fakedata, 1, function(x) {
dr(0, x[1], 1) +
dr(1, x[2], 1) +
dr(0, x[3], 1)
})
View(fakedata)
fakedata$dfo <- apply(fakedata, 1, function(x) {
sqrt(dr(0, x[1], 1) +
dr(1, x[2], 1) +
dr(0, x[3], 1)) / 3
})
View(fakedata)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
col = dfo
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
col = dfo,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
col = fakedata$dfo,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = dfo,
colorkey = TRUE,
screen = list(z = 60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = dfo,
colorkey = TRUE,
screen = list(z = 50, x = 60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
screen = list(z = 50, x = 60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z = 50, x = 60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = ""
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z =60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z =60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z =160, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z =360, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
contour = TRUE,
region = TRUE,
screen = list(z =60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
colorkey = dfo,
region = TRUE,
screen = list(z =60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
groups = dfo,
screen = list(z =60, x = -60)
)
cloud(brms ~ uts*rbas, fakedata,
xlab = "unexpressed transcripts", ylab = "annotated transcripts",
zlab = "badly mapped reads",
main = "Optimisation surface",
screen = list(z =60, x = -60)
)
