P.Akbari - Daily Log
----15/07/2013----
With help from R.Smith set up environment and familiarised myself with the project and the SOAP Denovo Trans Algorithm (Soapdt)
Current task: Produce a script to input a sweep of parameters to Soapdt

----16/07/2013----
Completed script to input sweep of algorithms to Soapdt, recieved further help from R.Smith
Next task: Analyse output of parameter sweep on Soapdt applying objective function to results to produce a optimisation algorithm which varies the input parameters.

----17/07/2013----
Parameter sweep algorithm written above completed as expected, output saved in outputdata folder.

Wrote script (output_file_size_check.rb) to check select output file size for each of the assemblies.
	Results merged with outputdata/filenameToparameters.csv (produced by combinate_params.rb) in: outputdata/filenameToParameters_scafSeq.gzSizes.csv

Currently writing script (leaff_scafSeq_extract.rb) to apply leaff algorithm on scafSeq files stored in outputdata folder. Response saved in: outputdata/leaff_output.csv
	Using stored scafSeq.gz file sizes to prevent running empty scafSeq.gz files in leaff

----18/07/2013----
leaff_scafSeq_extract.rb finished
Load data into r, merged the two csv files (outputdata/filenameToParameters_scafSeq.gzSizes.csv and outputdata/leaffoutput.csv) saved as outputdata/merged_leaff_soapdt.csv
Plotting and visualising data in R

----19/06/2013----
Completed plotting of input params into soapdt and output from leaff
Began refactor of combinate_params.rb code (in combinate_params_refactor.rb) to contain a ParameterSweeper class

----22/06/2013----
combinate_params_refactor.rb - nearly complete, adding constructor functionality

----23/06/2013----
combinate_params_refactor.rb RENAME parametersweeper.rb
	constructor functionality - all soapdt specific operations are now performed in soapdt constructor
	multithreading added
COMPLETE: parametersweeper class
Began work on applying objective functions to scafSeq output files

----24/06/2013----
Attempting to hack together the three objective functions and outputdata file, changed made:
	/lib/biopsy/objectives/(all three .rb files)
		require 'objectivefunction.rb' -> 'objectivefunction.rb'
	/lib/biopsy/objectives/reciporical_best_annotation.rb
		Bash command in rbusearch method: 
		`/bio_apps/rbusearch/rbusearch.rb --query ~/Code/biopsy/sandbox/#{@assembly} --target #{@reference} --output output --cores #{@threads}`
		a[:reference] = ~/Code/biopsy/sandbox/Athaliana_167_protein_primaryTranscriptOnly.fa
		Added Dir.mkdir('output') to rbusearch method
	/lib/biopsy/objectives/unexpressed_transcripts.rb
		Changed ../#{@assembly} to  ~/Code/biopsy/sandbox/#{@assembly}
	Set chmod 777 to usearch in /apps/


----25/06/2013----
	Reversed changes made yesterday
	Debugged apply_objective_function.rb, script now works to apply objectivehandler.rb on all scafSeq output files
	Modified /lib/biopsy/objectivehandler.rb to have 3 cleaup states, no cleanup, clean all but essential output files, or clean all
	Ran objectivehandler script on output on local PC and cluster
----26/06/2013----
	Discussed biopsy and chain projects with R.Smith, drew up plan
	Began visualising data in R,  3D scatter plots of output with color variant
----29/06/2013----
	Completed 3D scatter plot
	Discussed applicaton of genetic algorithm to biopsy, began reading about genetic algorithms
----30/06/2013----
	Began basic implementation of genetic algorithm in ruby.
	Considering how to base initial variables (pop size, hillwalking, selection rate) based on user defined time constraint
	Began writing the selection process used by the genetic algorithm
----31/06/2013----
	Completed selection process
	Completed crossover
	Pre-alpha Genetic Algorithm without mutation functionality working
----01/07/2013----
	Rewrote code, chromosomes now stored as hashes
	population size regulated, by pushing pop size up or down based on deviation from initial population size
	Begun thinking about mutation script, will implement tomorrow
----02/06/2013----
	Updated parameter sweep to store assembly number alongside parameter set in an array [0] -> parameterset [1]-> assembly number
		updated genetic_algorithm to accomodate this change
	Added mutation to genetic algorithm
	Current chromosome data structure:
		[[{PARAMETER SET}, ASSEMBLY_ID], SCORE/RANK]

	TODO:
		TEST CHANGES MADE ON 02/06
		Find assembly number for generated children and add this to hash
		Make a list of assembly_numbers which have undergone objective function
		Storing precomputed parameter scores